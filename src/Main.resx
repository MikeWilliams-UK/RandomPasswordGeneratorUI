<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMeRhQCzdYEAzZeJGsuX
        iGzHk4XMt4Z41LSDdne1hXcitYl1AbSGdQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANOYiwC4j4MAzZiKGMuW
        iGvKlYfKyZOF+ceRgv+1g3X/sYFz+7KCddOzg3Z5tIV3H7KWjQCziHwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANGVjADOmIkAz5iJC8uW
        iFvJlYfIyZOF+8iShP+7mpD/ma2w/4qmrP+kjIX/sYFz/7KAc/2ygnXTtIR2abWFdhC1hXUAsYJ3AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADJloYAqQCjAMyW
        iC3KlYenyZOF9siShP+4nJT/jLa//2DP6f9V1fP/VdPx/1nO6v97sb3/oY+J/7GAc/+ygXP5soN1tbSE
        dzm6hHgBt4R4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAypeJAMuZ
        igTLl4hXyZSG2cmShP+/mI3/kbO6/17Q7P9a0u//g7vH/6ygnP+ilI//fa65/1rO6f9X0O3/fq64/6aK
        gf+ygHL/soJ147ODd2i1hHgItIR3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMyX
        iQDMl4gIypWHdsmUhu/Ik4X/qaWi/2rJ4P9W1fP/grvI/7Sel//Ik4X/x5GC/7WDdf+xgHP/pIyF/36u
        uf9W0e7/X8nj/5Kcnf+vgnX/sYF09bOEdoi1hHYOtIR2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADJlYYAypaGBsqVh3zJk4X2xJSH/5OyuP9W1fP/a8jf/6qkov/Hk4X/yJKE/8eThf/FkoT/tIR3/7CB
        dP+xgHP/sYFz/52Sjv9rv9L/UtX0/36uuP+shXr/sYF0+rODdo+1hXgLtYV3AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAypSIALqccwDLlohjyJSF88OVif+HuMP/Utf3/4K7yP++mI7/yZKD/8eThf/Hk4X/x5OF/8WS
        hP+0hHf/sIF0/7CBdP+wgXT/sYBy/6yFev9/rLb/Udb1/3O3x/+qhnz/soF0+bODdnmxgnQDsoJ1AAAA
        AAAAAAAAAAAAAAAAAADKlogAypaHMMmUht7GlIb/i7a//1HY9/+Mtb7/xZSH/8iThP/Hk4X/x5OF/8eT
        hf/Hk4X/xZKE/7SEd/+wgXT/sIF0/7CBdP+wgXT/sIFz/7CBdf+IpKr/Udb1/3a1w/+thHj/soJ06rOD
        dkS0hHYAq35yAAAAAAAAAAAAyJOEAMiWiATKlYeZyZKE/6Kpqf9S1/b/g7vH/8WUh//Hk4X/x5OF/8eT
        hf/Hk4X/x5OF/8eThf/FkoT/tIR3/7CBdP+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+CqrP/T9j3/4mk
        qf+xgHP/soN1sbKDdguxg3UAAAAAANqUlADKlocAypaHKcmUheLAl4z/acrg/2XL5P+9mY//yJKE/8eT
        hf/Hk4X/x5OF/8eThf/Hk4X/x5OF/8WShP+0hHf/sIF0/7CBdP+wgXT/sIF0/7CBdP+wgXT/sIFz/6yE
        ev9pwNT/W83n/6WLg/+ygXPvs4N1PbOFdgC8ZWgAvJSDAM2XiQDLlohaypOE/KWnpv9R2Pj/mK+z/8mS
        g//Hk4X/x5OF/8eThf/Hk4X/x5OF/8eThf/Hk4X/xZKE/7SEd/+wgXT/sIF0/7CBdP+wgXT/sIF0/7CB
        dP+wgXT/soBy/5Obm/9P1/f/i6On/7KAcv+zg3V0tIZ3ALRzbACzlHkAzpaKAMmUhnjJkoP/jLW//1bV
        8/+1npf/yJKE/8eThf/Hk4X/x5OF/8eThf/Hk4X/x5OF/8eThf/FkoT/tIR3/7CBdP+wgXT/sIF0/7CB
        dP+wgXT/sIF0/7CBdP+xgHP/p4mA/1rN6f90tsX/sYFz/7OEdpTTYd0Ar391ANGxpQDIj4AAx5OFgMiS
        hP+BvMn/X9Dq/76Yjv/Ik4T/x5OF/8eThf/Hk4X/x5OF/8eThf/Hk4X/x5OF/8WShP+0hHf/sIF0/7CB
        dP+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+thHj/ZMXd/2y90P+wgnX/tIR3m7+AgAG0gHYA0bOmAMiO
        gADHk4WAyJKE/4G8yf9gz+j/v5iN/8iThP/Hk4X/x5OF/8eThf/Hk4X/x5OF/8eThf/Hk4X/xZKE/7SE
        d/+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+wgXT/sIF0/62EeP9lxNv/bL7R/7CCdf+0hHebv4CAAbSA
        dgDRs6YAyI6AAMeThYDIkoT/gbzJ/2DP6P+/mI3/yJOE/8eThf/Hk4X/x5OF/8eThf/Hk4X/x5OF/8eT
        hf/FkoT/tIR3/7CBdP+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+wgXT/rYR4/2XE2/9svtH/sIJ1/7SE
        d5u/gIABtIB2ANGzpgDIjoAAx5OFgMiShP+BvMn/YM/o/7+Yjf/Ik4T/x5OF/8eThf/Hk4X/x5OF/8eT
        hf/Hk4X/x5OF/8WShP+0hHf/sIF0/7CBdP+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+thHj/ZcTb/2y+
        0f+wgnX/tIR3m7+AgAG0gHYA0bOmAMiOgADHk4WAyJKE/4G8yf9gz+j/v5iN/8iThP/Hk4X/x5OF/8eT
        hf/Hk4X/x5OF/8eThf/Hk4X/xZKE/7SEd/+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+wgXT/sIF0/62E
        eP9lxNv/bL7R/7CCdf+0hHebv4CAAbSAdgDRs6YAyI6AAMeThYDIkoT/gbzJ/2DP6P+/mI3/yJOE/8eT
        hf/Hk4X/x5OF/8eThf/Hk4X/x5OF/8eThf/FkoT/tIR3/7CBdP+wgXT/sIF0/7CBdP+wgXT/sIF0/7CB
        dP+wgXT/rYR4/2XE2/9svtH/sIJ1/7SEd5u/gIABtIB2ANGzpgDIjoAAx5OFgMiShP+BvMn/YM/o/7+Y
        jf/Ik4T/x5OF/8eThf/Hk4X/x5OF/8eThf/Hk4X/x5OF/8WShP+0hHf/sIF0/7CBdP+wgXT/sIF0/7CB
        dP+wgXT/sIF0/7CBdP+thHj/ZcTb/2y+0f+wgnX/tIR3m7+AgAG0gHYA0bOmAMiOgADHk4WAyJKE/4G8
        yf9gz+j/v5iN/8iThP/Hk4X/x5OF/8eThf/Hk4X/x5OF/8eThf/Hk4X/xZKE/7SEd/+wgXT/sIF0/7CB
        dP+wgXT/sIF0/7CBdP+wgXT/sIF0/62EeP9lxNv/bL7R/7CCdf+0hHebv4CAAbSAdgDRs6YAyI6AAMeT
        hYDIkoT/gbzJ/2DP6P+/mI3/yJOE/8eThf/Hk4X/x5OF/8eThf/Hk4X/x5OF/8eThf/FkoT/tIR3/7CB
        dP+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+wgXT/rYR4/2XE2/9svtH/sIJ1/7SEd5u/gIABtIB2ANGz
        pgDIjoAAx5OFgMiShP+BvMn/YM/o/7+Yjf/Ik4T/x5OF/8eThf/Hk4X/x5OF/8eThf/Hk4X/x5OF/8WS
        hP+0hHf/sIF0/7CBdP+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+thHj/ZcTb/2y+0f+wgnX/tIR3m7+A
        gAG0gHYA0bOmAMiOgADHk4WAyJKE/4G8yf9gz+j/wJeM/8mShP/Hk4X/x5OF/8eThf/Hk4X/x5OF/8eT
        hf/Hk4X/xZKE/7SEd/+wgXT/sIF0/7CBdP+wgXT/sIF0/7CBdP+wgXT/sYBz/6+Cdv9lxNv/bL7R/7CC
        df+0hHebv4CAAbSAdgDRs6YAyI6AAMeThYDIkoT/gbzJ/1LX9v+Tsbj/t5yV/8aUhv/JkoP/yJOE/8eT
        hf/Hk4X/x5OF/8eThf/FkoT/tIR3/7CBdP+wgXT/sIF0/7CBdP+wgXP/soBy/7CBdP+li4P/i6Kn/1XS
        7/9rvtD/sIJ1/7SEd5u/gIABtIB2ANGzpgDIjoAAx5OFgciShP+iqan/asng/1PW9f9Z0/D/eMHS/5+q
        rP+8mpD/yJOE/8mSg//Ik4X/x5OF/8WShP+0hHf/sIF0/7CBdP+ygHL/sYBz/6mIfv+Tm5z/c7fG/1nP
        6v9R1vX/Ycjg/4uipv+wgXT/tIR3m7+AgAG0gHYA07WpAMmOgADIk4Z8yJOF/8iThP/Clor/rKOg/4i4
        w/9kzeX/U9f2/1/P6/+BvMr/p6ak/8CXjP/IkoT/x5CC/7WDdf+xf3L/rIV6/5mWlP97sbz/Xcvk/1HW
        9f9czOb/eLPA/5eYl/+qhnz/sIFz/7GCdP+1hXeWwn6DAbWAdgDElYoAzpeIAMqWhyPLlod5ypWHwcmU
        hvHJkoT/yJKE/7+Xjf+mpqX/gbzJ/1/P6v9T1vX/Zczk/4q3wf+soJz/oZSP/4Kqsv9jxtz/UtXz/1nO
        6v9zt8f/kpyd/6iIf/+xgHP/soBy/7GBdPSyg3XIs4N2graFeC2njm8AuYB3AAAAAAAAAAAAzp2MAM6x
        kwDMlogPzJaHP8uWh4fJlYbNyZSF9smSg//Ik4T/vJmP/6Gpqv97wM//W9Lt/1XV9P9U1PL/VtHu/268
        zv+NoKP/pYuD/7CBdP+ygHL/soF0+LKDddSzg3aQtIR3RraGdhO7iHcBuYV4AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADMnIEAzp99AcyXiRXLlohLypWHlsmUhtfJk4X5yZKD/8eThf+5m5P/mqyv/4ul
        qv+ijYf/r4J2/7KAcv+xgXP7soJ13bKDdp+0hHdUtYR2GrWCdQKygXQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANGajADVm44DzZiIHcuWiFjKlYejyZSG38mT
        hfvHkIL/toJ1/7GBc/yxgnXks4N2rLOEdmG0hHcjt4d5BKuAcQDnnpMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADSkIsAzp2FAM2X
        hQbNl4ksy5aIdciThcq3hnjRs4N2gLSEdjO2hngIs4Z5AMCHdwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gP///gB///gAH//wAAf/wAAD/4AAAf8AAAD/AAAAfgAAAHwAAAA8AA
        AAPAAAADwAAAA8AAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAA
        AAHAAAABwAAAA/AAAAf8AAA//4AB///wD/8=
</value>
  </data>
</root>