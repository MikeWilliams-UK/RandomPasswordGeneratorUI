using System.Diagnostics;
using System.Security.Cryptography;
using System.Text;

namespace RandomPasswordGenerator;

public class Password
{
    public int Length { get; set; }
    public bool IncludeLowerCase { get; set; }
    public bool IncludeUpperCase { get; set; }
    public bool IncludeNumbers { get; set; }
    public bool IncludeSymbols { get; set; }
    public string Symbols { get; set; }
    public bool NoSimilarCharacters { get; set; }
    public bool NoSequentialCharacters { get; set; }
    public bool NoDuplicateCharacters { get; set; }
    public bool BeginsWithLetter { get; set; }

    private static RandomNumberGenerator _rng;

    public Password()
    {
        _rng = RandomNumberGenerator.Create();
    }

    #region Generated by ChatGPT

    private bool ContainsMoreThanTwoConsecutiveRepeatedCharacters(string input)
    {
        var consecutiveCount = 1;

        for (var i = 1; i < input.Length; i++)
        {
            if (input[i] == input[i - 1])
            {
                consecutiveCount++;

                if (consecutiveCount > 2)
                {
                    // If more than two consecutive repeated characters are found, return true
                    return true;
                }
            }
            else
            {
                consecutiveCount = 1; // Reset count if characters are not consecutive
            }
        }

        // If no more than two consecutive repeated characters are found, return false
        return false;
    }

    private bool ContainsMoreThanTwoSequentialCharacters(string input)
    {
        int sequentialCount = 1;

        for (int i = 1; i < input.Length; i++)
        {
            if (IsSequential(input[i - 1], input[i]))
            {
                sequentialCount++;

                if (sequentialCount > 2)
                {
                    // If more than two sequential characters are found, return true
                    return true;
                }
            }
            else
            {
                sequentialCount = 1; // Reset count if characters are not sequential
            }
        }

        // If no more than two sequential characters are found, return false
        return false;
    }

    private bool IsSequential(char a, char b)
    {
        // Check if characters are consecutive in the ASCII sequence
        return Math.Abs(a - b) == 1;
    }

    #endregion

    public string Next()
    {
        var lettersAllowed = IncludeLowerCase || IncludeUpperCase;

        var stringBuilder = new StringBuilder();
        if (IncludeNumbers)
        {
            stringBuilder.Append("01234567890");
        }

        if (IncludeLowerCase)
        {
            stringBuilder.Append("abcdefghijklmnopqrstuvwxyz");
        }

        if (IncludeUpperCase)
        {
            stringBuilder.Append("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        }

        if (IncludeSymbols && !string.IsNullOrWhiteSpace(Symbols))
        {
            stringBuilder.Append(Symbols);
        }

        var available = stringBuilder.ToString();

        if (NoSimilarCharacters)
        {
            foreach (var chr in "il1Lo0O".ToCharArray())
            {
                available = available.Replace($"{chr}", "");
            }
        }

        available = Shuffled(available);
        var max = available.Length;

        var password = new char[Length];

        for (var characterPosition = 0; characterPosition < Length; characterPosition++)
        {
            password[characterPosition] = available[GetRandomNumberInRange(0, max - 1)];
        }

        Debug.WriteLine(available);
        var result = string.Join(null, password);

        if (NoDuplicateCharacters)
        {
            if (ContainsMoreThanTwoConsecutiveRepeatedCharacters(result))
            {
                Debug.WriteLine("result cleared - More Than Two Consecutive Repeated Characters !");
                result = string.Empty;
            }
        }

        if (NoSequentialCharacters)
        {
            if (ContainsMoreThanTwoSequentialCharacters(result))
            {
                Debug.WriteLine("result cleared - More Than Two Sequential Characters !");
                result = string.Empty;
            }
        }

        if (BeginsWithLetter && lettersAllowed)
        {
            if (result.Length > 0)
            {
                if (!char.IsLetter(result[0]))
                {
                    Debug.WriteLine("result cleared - Did not begin with a letter");
                    result = string.Empty;
                }
            }
        }

        return result;
    }

    private string Shuffled(string sorted)
    {
        var characters = sorted.ToCharArray();
        var shuffled = Shuffle(characters);
        return string.Join(null, shuffled);
    }

    private int GetRandomNumberInRange(int min, int max)
    {
        if (min > max)
            throw new ArgumentOutOfRangeException();

        var data = new byte[sizeof(int)];
        _rng.GetBytes(data);
        var randomNumber = BitConverter.ToInt32(data, 0);

        return (int)Math.Floor((double)(min + Math.Abs(randomNumber % (max - min))));
    }

    private IEnumerable<T> Shuffle<T>(IEnumerable<T> items)
    {
        return from item in items orderby Guid.NewGuid() select item;
    }
}